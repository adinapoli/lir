// Generated by psc-bundle 0.9.3
var Lir = {};
(function(exports) {
    "use strict";

  // module Data.Functor

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(Lir["Data.Functor"] = Lir["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(Lir["Control.Semigroupoid"] = Lir["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];       
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(Lir["Control.Category"] = Lir["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Category = Lir["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["const"] = $$const;
})(Lir["Data.Function"] = Lir["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.Functor"];
  var Data_Function = Lir["Data.Function"];
  var Data_Unit = Lir["Data.Unit"];
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];       
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(Lir["Data.Functor"] = Lir["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Control.Apply"];
  var Data_Functor = Lir["Data.Functor"];
  var Data_Function = Lir["Data.Function"];
  var Control_Category = Lir["Control.Category"];       
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(Lir["Control.Apply"] = Lir["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Apply = Lir["Control.Apply"];
  var Data_Functor = Lir["Data.Functor"];
  var Data_Unit = Lir["Data.Unit"];       
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(Lir["Control.Applicative"] = Lir["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Control.Bind"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Control_Apply = Lir["Control.Apply"];
  var Control_Category = Lir["Control.Category"];
  var Data_Function = Lir["Data.Function"];
  var Data_Functor = Lir["Data.Functor"];       
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(Lir["Control.Bind"] = Lir["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Applicative = Lir["Control.Applicative"];
  var Control_Apply = Lir["Control.Apply"];
  var Control_Bind = Lir["Control.Bind"];
  var Data_Functor = Lir["Data.Functor"];       
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(Lir["Control.Monad"] = Lir["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(Lir["Data.Foldable"] = Lir["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };
})(Lir["Data.Semigroup"] = Lir["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.Semigroup"];
  var Data_Unit = Lir["Data.Unit"];
  var Data_Void = Lir["Data.Void"];       
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(Lir["Data.Semigroup"] = Lir["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Function = Lir["Data.Function"];
  var Data_Semigroup = Lir["Data.Semigroup"];
  var Data_Unit = Lir["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(Lir["Data.Monoid"] = Lir["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = Lir["Control.Alt"];
  var Control_Alternative = Lir["Control.Alternative"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Control_Apply = Lir["Control.Apply"];
  var Control_Bind = Lir["Control.Bind"];
  var Control_Extend = Lir["Control.Extend"];
  var Control_Monad = Lir["Control.Monad"];
  var Control_MonadZero = Lir["Control.MonadZero"];
  var Control_Plus = Lir["Control.Plus"];
  var Data_Bounded = Lir["Data.Bounded"];
  var Data_Eq = Lir["Data.Eq"];
  var Data_Function = Lir["Data.Function"];
  var Data_Functor = Lir["Data.Functor"];
  var Data_Functor_Invariant = Lir["Data.Functor.Invariant"];
  var Data_Monoid = Lir["Data.Monoid"];
  var Data_Ord = Lir["Data.Ord"];
  var Data_Ordering = Lir["Data.Ordering"];
  var Data_Semigroup = Lir["Data.Semigroup"];
  var Data_Show = Lir["Data.Show"];
  var Data_Unit = Lir["Data.Unit"];
  var Control_Category = Lir["Control.Category"];       
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 232, column 1 - line 232, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
  exports["maybe"] = maybe;
})(Lir["Data.Maybe"] = Lir["Data.Maybe"] || {});
(function(exports) {
    "use strict";

  // module Data.HeytingAlgebra

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(Lir["Data.HeytingAlgebra"] = Lir["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.HeytingAlgebra"];
  var Data_Unit = Lir["Data.Unit"];       
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(Lir["Data.HeytingAlgebra"] = Lir["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.Foldable"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Control_Apply = Lir["Control.Apply"];
  var Control_Plus = Lir["Control.Plus"];
  var Data_BooleanAlgebra = Lir["Data.BooleanAlgebra"];
  var Data_Eq = Lir["Data.Eq"];
  var Data_Function = Lir["Data.Function"];
  var Data_Maybe = Lir["Data.Maybe"];
  var Data_Maybe_First = Lir["Data.Maybe.First"];
  var Data_Maybe_Last = Lir["Data.Maybe.Last"];
  var Data_Monoid = Lir["Data.Monoid"];
  var Data_Monoid_Additive = Lir["Data.Monoid.Additive"];
  var Data_Monoid_Conj = Lir["Data.Monoid.Conj"];
  var Data_Monoid_Disj = Lir["Data.Monoid.Disj"];
  var Data_Monoid_Dual = Lir["Data.Monoid.Dual"];
  var Data_Monoid_Endo = Lir["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = Lir["Data.Monoid.Multiplicative"];
  var Data_Ord = Lir["Data.Ord"];
  var Data_Ordering = Lir["Data.Ordering"];
  var Data_Semiring = Lir["Data.Semiring"];
  var Data_Unit = Lir["Data.Unit"];
  var Control_Alt = Lir["Control.Alt"];
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];
  var Control_Category = Lir["Control.Category"];
  var Data_Semigroup = Lir["Data.Semigroup"];
  var Data_HeytingAlgebra = Lir["Data.HeytingAlgebra"];       
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(Lir["Data.Foldable"] = Lir["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(Lir["Data.Traversable"] = Lir["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.Traversable"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Control_Apply = Lir["Control.Apply"];
  var Control_Category = Lir["Control.Category"];
  var Data_Foldable = Lir["Data.Foldable"];
  var Data_Functor = Lir["Data.Functor"];
  var Data_Maybe = Lir["Data.Maybe"];
  var Data_Maybe_First = Lir["Data.Maybe.First"];
  var Data_Maybe_Last = Lir["Data.Maybe.Last"];
  var Data_Monoid_Additive = Lir["Data.Monoid.Additive"];
  var Data_Monoid_Conj = Lir["Data.Monoid.Conj"];
  var Data_Monoid_Disj = Lir["Data.Monoid.Disj"];
  var Data_Monoid_Dual = Lir["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = Lir["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Data$dotFunctor$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]()))(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(Lir["Data.Traversable"] = Lir["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Alt = Lir["Control.Alt"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Control_Apply = Lir["Control.Apply"];
  var Control_Bind = Lir["Control.Bind"];
  var Control_Extend = Lir["Control.Extend"];
  var Control_Monad = Lir["Control.Monad"];
  var Data_Bifoldable = Lir["Data.Bifoldable"];
  var Data_Bifunctor = Lir["Data.Bifunctor"];
  var Data_Bitraversable = Lir["Data.Bitraversable"];
  var Data_Bounded = Lir["Data.Bounded"];
  var Data_Eq = Lir["Data.Eq"];
  var Data_Foldable = Lir["Data.Foldable"];
  var Data_Function = Lir["Data.Function"];
  var Data_Functor = Lir["Data.Functor"];
  var Data_Functor_Invariant = Lir["Data.Functor.Invariant"];
  var Data_Monoid = Lir["Data.Monoid"];
  var Data_Ord = Lir["Data.Ord"];
  var Data_Ordering = Lir["Data.Ordering"];
  var Data_Semigroup = Lir["Data.Semigroup"];
  var Data_Semiring = Lir["Data.Semiring"];
  var Data_Show = Lir["Data.Show"];
  var Data_Traversable = Lir["Data.Traversable"];       
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 46, column 3 - line 46, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 89, column 3 - line 89, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
})(Lir["Data.Either"] = Lir["Data.Either"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };
})(Lir["Data.Foreign"] = Lir["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(Lir["Data.Int"] = Lir["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.Int"];
  var Data_Boolean = Lir["Data.Boolean"];
  var Data_BooleanAlgebra = Lir["Data.BooleanAlgebra"];
  var Data_Bounded = Lir["Data.Bounded"];
  var Data_Eq = Lir["Data.Eq"];
  var Data_Function = Lir["Data.Function"];
  var Data_Int_Bits = Lir["Data.Int.Bits"];
  var Data_Maybe = Lir["Data.Maybe"];
  var Data_Ord = Lir["Data.Ord"];
  var $$Math = Lir["Math"];
  var Partial_Unsafe = Lir["Partial.Unsafe"];
  var Data_HeytingAlgebra = Lir["Data.HeytingAlgebra"];
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
})(Lir["Data.Int"] = Lir["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.length = function (s) {
    return s.length;
  };
})(Lir["Data.String"] = Lir["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.String"];
  var Prelude = Lir["Prelude"];
  var Data_Maybe = Lir["Data.Maybe"];
  var Data_String_Unsafe = Lir["Data.String.Unsafe"];
  var Data_Semiring = Lir["Data.Semiring"];
  var Data_Eq = Lir["Data.Eq"];
  var Data_Ordering = Lir["Data.Ordering"];
  var Data_Ring = Lir["Data.Ring"];
  var Data_Function = Lir["Data.Function"];
  exports["length"] = $foreign.length;
})(Lir["Data.String"] = Lir["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.Foreign"];
  var Prelude = Lir["Prelude"];
  var Data_Either = Lir["Data.Either"];
  var Data_Function_Uncurried = Lir["Data.Function.Uncurried"];
  var Data_Int = Lir["Data.Int"];
  var Data_Maybe = Lir["Data.Maybe"];
  var Data_String = Lir["Data.String"];
  var Data_Show = Lir["Data.Show"];
  var Data_Semigroup = Lir["Data.Semigroup"];
  var Data_Eq = Lir["Data.Eq"];
  var Data_HeytingAlgebra = Lir["Data.HeytingAlgebra"];
  var Data_Ord = Lir["Data.Ord"];
  var Data_Ordering = Lir["Data.Ordering"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Data_Function = Lir["Data.Function"];
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
          };
          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
      };
  }; 
  var readString = unsafeReadTagged("String");
  exports["TypeMismatch"] = TypeMismatch;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(Lir["Data.Foreign"] = Lir["Data.Foreign"] || {});
(function(exports) {
  /* globals exports */
  "use strict";     

  exports.isNaN = isNaN;

  exports.readFloat = parseFloat;
})(Lir["Global"] = Lir["Global"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Global"];
  exports["isNaN"] = $foreign["isNaN"];
  exports["readFloat"] = $foreign.readFloat;
})(Lir["Global"] = Lir["Global"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Either = Lir["Data.Either"];
  var Data_Foreign = Lir["Data.Foreign"];
  var Data_Int = Lir["Data.Int"];
  var Data_Maybe = Lir["Data.Maybe"];
  var Data_String = Lir["Data.String"];
  var Global = Lir["Global"];
  var Prelude = Lir["Prelude"];
  var Data_Function = Lir["Data.Function"];
  var Data_Ord = Lir["Data.Ord"];
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];
  var Data_HeytingAlgebra = Lir["Data.HeytingAlgebra"];
  var Data_Eq = Lir["Data.Eq"];       
  var stringCompare = function (value) {
      return function (compare) {
          var $0 = Data_Foreign.readString(value);
          if ($0 instanceof Data_Either.Right) {
              return compare(Data_String.length($0.value0));
          };
          return false;
      };
  };
  var required = function (value) {
      return Data_Function.apply(stringCompare(value))(function (x) {
          return x > 0;
      });
  };
  var readNumberFromString = function (value) {
      var notNaN = function ($20) {
          return !Global["isNaN"]($20);
      };
      var $2 = Data_Foreign.readString(value);
      if ($2 instanceof Data_Either.Right) {
          var number = Global.readFloat($2.value0);
          var $3 = notNaN(number);
          if ($3) {
              return new Data_Maybe.Just(number);
          };
          if (!$3) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Constraints line 97, column 5 - line 97, column 51: " + [ $3.constructor.name ]);
      };
      return Data_Maybe.Nothing.value;
  };
  var notNullOrUndefined = function (value) {
      return Data_Function.apply(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Foreign.isNull(value) || Data_Foreign.isUndefined(value));
  };
  var minLength = function (i) {
      return function (value) {
          return Data_Function.apply(stringCompare(value))(function (x) {
              return x >= i;
          });
      };
  };
  var maxLength = function (i) {
      return function (value) {
          return Data_Function.apply(stringCompare(value))(function (x) {
              return x <= i;
          });
      };
  };
  var lessThan = function (i) {
      return function (value) {
          var $5 = readNumberFromString(value);
          if ($5 instanceof Data_Maybe.Just) {
              return Data_Int.toNumber(i) > $5.value0;
          };
          return false;
      };
  };
  var isNumber = function (value) {
      var $7 = readNumberFromString(value);
      if ($7 instanceof Data_Maybe.Just) {
          return true;
      };
      return false;
  };
  var isNat = function (value) {
      var $9 = Data_Foreign.readString(value);
      if ($9 instanceof Data_Either.Right) {
          return Data_Maybe.maybe(false)(function (i) {
              return i >= 0;
          })(Data_Int.fromString($9.value0));
      };
      return false;
  };
  var isInt = function (value) {
      var $11 = Data_Foreign.readString(value);
      if ($11 instanceof Data_Either.Right) {
          return Data_Maybe.maybe(false)(Data_Function["const"](true))(Data_Int.fromString($11.value0));
      };
      return false;
  };
  var isBoolean = function (value) {
      var $13 = Data_Foreign.readString(value);
      if ($13 instanceof Data_Either.Right && $13.value0 === "true") {
          return true;
      };
      if ($13 instanceof Data_Either.Right && $13.value0 === "false") {
          return true;
      };
      return false;
  };
  var greaterThan = function (i) {
      return function (value) {
          var $16 = readNumberFromString(value);
          if ($16 instanceof Data_Maybe.Just) {
              return Data_Int.toNumber(i) < $16.value0;
          };
          return false;
      };
  };
  var exactLength = function (i) {
      return function (value) {
          return Data_Function.apply(stringCompare(value))(function (x) {
              return x === i;
          });
      };
  };
  var compress = function (f) {
      return function (x) {
          var $18 = f(x);
          if ($18 instanceof Data_Either.Right) {
              return true;
          };
          return false;
      };
  };
  exports["exactLength"] = exactLength;
  exports["greaterThan"] = greaterThan;
  exports["isBoolean"] = isBoolean;
  exports["isInt"] = isInt;
  exports["isNat"] = isNat;
  exports["isNumber"] = isNumber;
  exports["lessThan"] = lessThan;
  exports["maxLength"] = maxLength;
  exports["minLength"] = minLength;
  exports["notNullOrUndefined"] = notNullOrUndefined;
  exports["required"] = required;
})(Lir["Constraints"] = Lir["Constraints"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(Lir["Control.Monad.Eff"] = Lir["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Control.Monad.Eff"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Control_Apply = Lir["Control.Apply"];
  var Control_Bind = Lir["Control.Bind"];
  var Control_Monad = Lir["Control.Monad"];
  var Data_Functor = Lir["Data.Functor"];
  var Data_Unit = Lir["Data.Unit"];       
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(Lir["Control.Monad.Eff"] = Lir["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
})(Lir["Control.Monad.Eff.Unsafe"] = Lir["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = Lir["Control.Monad.Eff"];
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];       
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeInterleaveEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
})(Lir["Control.Monad.Eff.Unsafe"] = Lir["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };
})(Lir["Data.Array"] = Lir["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Data.Array"];
  var Prelude = Lir["Prelude"];
  var Control_Alt = Lir["Control.Alt"];
  var Control_Alternative = Lir["Control.Alternative"];
  var Control_Lazy = Lir["Control.Lazy"];
  var Data_Foldable = Lir["Data.Foldable"];
  var Data_Maybe = Lir["Data.Maybe"];
  var Data_Traversable = Lir["Data.Traversable"];
  var Data_Tuple = Lir["Data.Tuple"];
  var Data_Unfoldable = Lir["Data.Unfoldable"];
  var Partial_Unsafe = Lir["Partial.Unsafe"];
  var Data_Function = Lir["Data.Function"];
  var Data_Ordering = Lir["Data.Ordering"];
  var Data_Ring = Lir["Data.Ring"];
  var Data_Ord = Lir["Data.Ord"];
  var Data_Eq = Lir["Data.Eq"];
  var Data_HeytingAlgebra = Lir["Data.HeytingAlgebra"];
  var Control_Apply = Lir["Control.Apply"];
  var Data_Functor = Lir["Data.Functor"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Data_Boolean = Lir["Data.Boolean"];
  var Data_Semiring = Lir["Data.Semiring"];
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];
  var Control_Bind = Lir["Control.Bind"];
  var Data_Semigroup = Lir["Data.Semigroup"];
  var Control_Category = Lir["Control.Category"];
  exports["length"] = $foreign.length;
})(Lir["Data.Array"] = Lir["Data.Array"] || {});
(function(exports) {/*global exports, document*/

  // module Interop

  exports.getValue = function (selector) {
      "use strict";
      return function () {
          return document.querySelector(selector).value;
      };
  };
})(Lir["Interop"] = Lir["Interop"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var $foreign = Lir["Interop"];
  var Control_Monad_Eff = Lir["Control.Monad.Eff"];
  var DOM = Lir["DOM"];
  var Data_Foreign = Lir["Data.Foreign"];
  exports["getValue"] = $foreign.getValue;
})(Lir["Interop"] = Lir["Interop"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Data_Foreign = Lir["Data.Foreign"];
  var Prelude = Lir["Prelude"];
  var Data_Semigroup = Lir["Data.Semigroup"];
  var Data_Function = Lir["Data.Function"];       
  var Result = function (x) {
      return x;
  };
  var unResult = function (v) {
      return v;
  };
  var semigroupResult = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Function.apply(Result)({
              selector: v.selector, 
              messages: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.messages)(v1.messages)
          });
      };
  });
  exports["Result"] = Result;
  exports["unResult"] = unResult;
  exports["semigroupResult"] = semigroupResult;
})(Lir["Types"] = Lir["Types"] || {});
(function(exports) {
  // Generated by psc version 0.9.3
  "use strict";
  var Control_Monad_Eff = Lir["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = Lir["Control.Monad.Eff.Unsafe"];
  var DOM = Lir["DOM"];
  var Data_Array = Lir["Data.Array"];
  var Data_Foreign = Lir["Data.Foreign"];
  var Data_Traversable = Lir["Data.Traversable"];
  var Interop = Lir["Interop"];
  var Prelude = Lir["Prelude"];
  var Types = Lir["Types"];
  var Data_Functor = Lir["Data.Functor"];
  var Data_Foldable = Lir["Data.Foldable"];
  var Data_Semigroup = Lir["Data.Semigroup"];
  var Control_Bind = Lir["Control.Bind"];
  var Control_Semigroupoid = Lir["Control.Semigroupoid"];
  var Control_Applicative = Lir["Control.Applicative"];
  var Data_Function = Lir["Data.Function"];
  var Data_Eq = Lir["Data.Eq"];       
  var defaultResult = function (selector) {
      return {
          selector: selector, 
          messages: [  ]
      };
  };
  var applyRule = function (selector) {
      return function (rule) {
          return function (value) {
              var error = {
                  selector: selector, 
                  messages: [ rule.message ]
              };
              var $0 = rule.constraint(value);
              if ($0) {
                  return defaultResult(selector);
              };
              if (!$0) {
                  return error;
              };
              throw new Error("Failed pattern match at Validate line 43, column 3 - line 43, column 66: " + [ $0.constructor.name ]);
          };
      };
  };
  var validate = function (validation) {
      var validations = Data_Functor.map(Data_Functor.functorArray)(applyRule(validation.selector))(validation.rules);
      var reduce = function (results) {
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
              return function (x) {
                  return Data_Semigroup.append(Types.semigroupResult)(x)(acc);
              };
          })(defaultResult(validation.selector))(results);
      };
      var collect = function (value) {
          return Data_Functor.map(Data_Functor.functorArray)(function (f) {
              return f(value);
          })(validations);
      };
      return function __do() {
          var $1 = Interop.getValue(validation.selector)();
          return reduce(collect($1));
      };
  };
  var runValidation$prime = function (config) {
      return Data_Function.apply(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff))(Data_Functor.map(Data_Functor.functorArray)(validate)(config.validations));
  };
  var runValidation = function (config) {
      return Data_Function.apply(Control_Monad_Eff_Unsafe.unsafePerformEff)(function __do() {
          var $2 = runValidation$prime(config)();
          return Data_Functor.map(Data_Functor.functorArray)(Types.unResult)($2);
      });
  };
  var allValid = function (results) {
      var allMessages = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (x) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(x.messages)(acc);
          };
      })([  ])(results);
      return Data_Array.length(allMessages) === 0;
  };
  exports["allValid"] = allValid;
  exports["runValidation"] = runValidation;
})(Lir["Validate"] = Lir["Validate"] || {});